/*
 * generated by Xtext 2.25.0
 */
package org.xtext.idmProject.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.idmProject.iDMProject.JsonCommands
import java.io.File
import java.io.BufferedReader
import java.io.FileReader
import org.xtext.idmProject.generator.JacksonCompiler

@ExtendWith(InjectionExtension)
@InjectWith(IDMProjectInjectorProvider)
class IDMProjectParsingTest {
	@Inject
	ParseHelper<JsonCommands> parseHelper
	
	def String parser(String progFileName){
		var String prog = ""
		try{    
	        var testFile = new File(progFileName)
	
	        if(!testFile.exists){
	            println("That file doesn't exist!")
	        }else {
	            var reader = new BufferedReader(new FileReader(testFile))
	
				
	            var String line
	            while((line = reader.readLine) != null) {
	                prog += line + "\n"
	            }
	        }
	    }
	    catch(Exception e) {
	        println(e.stackTrace)
	    }
	    return prog
	}
	
	@Test
	def void loadModel() {
		var String prog = parser("./progs/ex1.IDMProject")
		val result = parseHelper.parse(prog)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void ex1Test(){
		var String prog = parser("./progs/ex1.IDMProject")
		val result = parseHelper.parse(prog)
		var JacksonCompiler compiler = new JacksonCompiler(result)
		compiler.compileAndRun()
	}
	
	@Test
	def void ex2Test(){
		var String prog = parser("./progs/ex2.IDMProject")
		val result = parseHelper.parse(prog)
		var JacksonCompiler compiler = new JacksonCompiler(result)
		compiler.compileAndRun()
	}
	
	@Test
	def void ex3Test(){
		var String prog = parser("./progs/ex3.IDMProject")
		val result = parseHelper.parse(prog)
		var JacksonCompiler compiler = new JacksonCompiler(result)
		compiler.compileAndRun()
	}
	
	@Test
	def void ex4Test(){
		var String prog = parser("./progs/ex4.IDMProject")
		val result = parseHelper.parse(prog)
		var JacksonCompiler compiler = new JacksonCompiler(result)
		compiler.compileAndRun()
	}
	
	@Test
	def void ex4Test(){
		var String prog = parser("./progs/ex5.IDMProject")
		val result = parseHelper.parse(prog)
		var JacksonCompiler compiler = new JacksonCompiler(result)
		compiler.compileAndRun()
	}
}
