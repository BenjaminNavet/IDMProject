/**
 * generated by Xtext 2.25.0
 */
package org.xtext.idmProject.tests;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.idmProject.generator.JacksonCompiler;
import org.xtext.idmProject.iDMProject.JsonCommands;

@ExtendWith(InjectionExtension.class)
@InjectWith(IDMProjectInjectorProvider.class)
@SuppressWarnings("all")
public class IDMProjectParsingTest {
  @Inject
  private ParseHelper<JsonCommands> parseHelper;
  
  public String parser(final String progFileName) {
    String prog = "";
    try {
      File testFile = new File(progFileName);
      boolean _exists = testFile.exists();
      boolean _not = (!_exists);
      if (_not) {
        InputOutput.<String>println("That file doesn\'t exist!");
      } else {
        FileReader _fileReader = new FileReader(testFile);
        BufferedReader reader = new BufferedReader(_fileReader);
        String line = null;
        while ((!Objects.equal((line = reader.readLine()), null))) {
          String _prog = prog;
          prog = (_prog + (line + "\n"));
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        InputOutput.<StackTraceElement[]>println(e.getStackTrace());
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return prog;
  }
  
  @Test
  public void loadModel() {
    try {
      String prog = this.parser("./progs/ex1.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex1Test() {
    try {
      String prog = this.parser("./progs/ex1.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex2Test() {
    try {
      String prog = this.parser("./progs/ex2.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex3Test() {
    try {
      String prog = this.parser("./progs/ex3.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex4Test() {
    try {
      String prog = this.parser("./progs/ex4.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex5Test() {
    try {
      String prog = this.parser("./progs/ex5.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex6Test() {
    try {
      String prog = this.parser("./progs/ex6.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void ex7Test() {
    try {
      String prog = this.parser("./progs/ex7.IDMProject");
      final JsonCommands result = this.parseHelper.parse(prog);
      JacksonCompiler compiler = new JacksonCompiler(result);
      compiler.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
